#cloud-config

# The script will auto deploy docker (with proxy setting) and heat-client environment for heat deployment in third device.
# It's easy use to paste the script in the post-creation part.

#hostname: river-2

apt_http_proxy: http://10.110.15.60:8080
apt_https_proxy: https://10.110.15.60:8080
apt_ftp_proxy: http://10.110.15.60:8080

apt_update: true
#manage-resolv-conf: true

#resolv_conf:
#  nameservers: ['8.8.8.8', '10.110.15.1']
# options:
#    rotate: true
#    timeout: 1

packages:
- apt-transport-https
- python2.7-dev
- python-virtualenv
- pastebinit
- git
- socat
- connect-proxy

# boot commands
# default: none
# this is very similar to runcmd, but commands run very early
# in the boot process, only slightly after a 'boothook' would run.
# bootcmd should really only be used for things that could not be
# done later in the boot process.  bootcmd is very much like
# boothook, but possibly with more friendly.
#  * bootcmd will run on every boot
#  * the INSTANCE_ID variable will be set to the current instance id.
#  * you can use 'cloud-init-boot-per' command to help only run once
bootcmd:
  - echo 127.0.1.1 river-2 >> /etc/hosts

write_files:
- path: /etc/apt/apt.conf.d/01proxy
  owner: root:root
  content: |
    Acquire::http::Proxy "http://10.110.15.60:8080";
    Acquire::https::Proxy "https://10.110.15.60:8080";
- path: /home/ubuntu/openrc
  permissions: '0644'
  content: |
    #!/bin/sh
    export LC_ALL=C
    export OS_NO_CACHE='true'
    export OS_TENANT_NAME='admin'
    export OS_USERNAME='admin'
    export OS_PASSWORD='admin'
    export OS_AUTH_URL='http://192.168.0.3:5000/v2.0/'
    export OS_AUTH_STRATEGY='keystone'
- path: /home/ubuntu/nsenter.sh
  permissions: '0755'
  content:  |
    #!/bin/sh
    curl https://www.kernel.org/pub/linux/utils/util-linux/v2.24/util-linux-2.24.tar.gz | tar -zxf-
    cd util-linux-2.24
    ./configure --without-ncurses
    make nsenter
    sudo cp nsenter /usr/local/bin
    cd ..
    git config --global http.proxy http://10.110.15.60:8080
    git config --global https.proxy https://10.110.15.60:8080
    git clone https://github.com/jpetazzo/pipework.git
- path: /home/ubuntu/docker_enter
  permissions: '0644'
  content: |
    #!/bin/sh
    PID=$(docker inspect --format '{{.State.Pid}}' my_container_id)
    nsenter --target $PID --mount --uts --ipc --net --pid
- path: /home/ubuntu/python_venv
  permissions: '0644'
  content: |
    #!/bin/sh
    virtualenv venv
    source venv/bin/activate
    pip --proxy http://10.110.15.60:8080 install python-heatclient
    pip --proxy http://10.110.15.60:8080 install python-novaclient

runcmd:
- export http_proxy=http://10.110.15.60:8080
- export https_proxy=https://10.110.15.60:8080
- apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9
- echo deb https://get.docker.io/ubuntu docker main > /etc/apt/sources.list.d/docker.list
- apt-get update
- apt-get install -y lxc-docker
- sed -i 's/127.0.0.1:3128/10.110.15.60:8080/' /etc/default/docker
- sed -i 's/^#export http/export http/' /etc/default/docker
- service docker restart
#- /home/ubuntu/nsenter.sh
- chown -R ubuntu:ubuntu /home/ubuntu
- echo export http_proxy=http://10.110.15.60:8080 >> /etc/profile
- echo export https_proxy=https://10.110.15.60:8080 >> /etc/profile