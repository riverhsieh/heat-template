#
# This is a HOT template just defining two single compute
# servers and create a router and private network and security group.
#
# The two servers will install docker packages and heat-client environment 
# for heat deployment
#
heat_template_version: 2013-05-23

description: >
  HOT template that just defines two single servers.
  And create a router and private network and security group
  Contains just base features to verify base HOT support.

parameters:
  key_name:
    type: string
    description: Name of an existing key pair to use for the server
    default: river-key-pair
    constraints:
      - custom_constraint: nova.keypair
  flavor:
    type: string
    description: Flavor for the server to be created
    default: m1.medium
    constraints:
      - allowed_values: [m1.tiny, m1.small, m1.medium, m1.large]
        description: Value
#      - custom_constraint: nova.flavor
  image:
    type: string
    description: Image ID or image name to use for the server
    default: ff5f7be8-4485-4c98-9299-d3675342e1da
    constraints:
      - custom_constraint: glance.image
  public_net:
    type: string
    description: >
      ID of public network for which floating IP addresses will be allocated
    default: 932975db-3afc-40d7-92c1-40f48c7948ef
  private_net_name:
    type: string
    description: Name of private network to be created
    default: penda_net
  private_subnet_name:
    type: string
    description: Name of private sub-network to be created
    default: penda_subnet
  private_net_cidr:
    type: string
    description: Private network address (CIDR notation)
    default: 192.168.200.0/24
  private_net_gateway:
    type: string
    description: Private network gateway address
    default: 192.168.200.254
  private_net_pool_start:
    type: string
    description: Start of private network IP address allocation pool
    default: 192.168.200.100
  private_net_pool_end:
    type: string
    description: End of private network IP address allocation pool
    default: 192.168.200.200
  router_name:
    type: string
    description: Name of router to be created
    default: penda_router

#  private_net_id:
#    type: string
#    description: >
#      ID of private network into which servers get deployed
#    default: 0cb665ef-b97b-4480-945e-693ef1cc1623
#  private_subnet_id:
#    type: string
#    description: >
#      ID of private sub network into which servers get deployed
#    default: c3fdd700-ab27-4442-a84e-429ba9c1ddad

  proxy_ip_port:
    type: string
    description: >
      Firewall proxy
    default: 10.110.15.60:8080

#  admin_pass:
#    type: string
#    description: Admin password
#    hidden: true
#    constraints:
#      - length: { min: 6, max: 8 }
#        description: Password length must be between 6 and 8 characters
#      - allowed_pattern: "[a-zA-Z0-9]+"
#        description: Password must consist of characters and numbers only
#      - allowed_pattern: "[A-Z]+[a-zA-Z0-9]*"
#        description: Password must start with an uppercase character
#  db_port:
#    type: number
#    description: Database port number
#    default: 50000
#    constraints:
#      - range: { min: 40000, max: 60000 }
#        description: Port number must be between 40000 and 60000

resources:
  private_net:
    type: OS::Neutron::Net
    properties:
      name: { get_param: private_net_name }

  private_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: { get_param: private_subnet_name }
      network_id: { get_resource: private_net }
      cidr: { get_param: private_net_cidr }
      gateway_ip: { get_param: private_net_gateway }
      allocation_pools:
        - start: { get_param: private_net_pool_start }
          end: { get_param: private_net_pool_end }

  router:
    type: OS::Neutron::Router
    properties:
      name: { get_param: router_name }
      external_gateway_info:
        network: { get_param: public_net }

  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: private_subnet }

  server-01:
    type: OS::Nova::Server
    properties:
      name: server-01
      key_name: { get_param: key_name }
      image: { get_param: image }
      flavor: { get_param: flavor }
      networks:
        - port: { get_resource: server-01_port }
#      admin_pass: { get_param: admin_pass }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/bash
            export http_proxy=http://proxy_ip
            export https_proxy=https://proxy_ip
            echo 127.0.1.1 server-01 >> /etc/hosts
            cat >/etc/apt/apt.conf.d/01proxy <<EOF
            Acquire::http::Proxy "http://proxy_ip";
            Acquire::https::Proxy "https://proxy_ip";
            EOF
            apt-get update
            apt-get install -y apt-transport-https git socat connect-proxy
            apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9
            echo deb https://get.docker.io/ubuntu docker main > /etc/apt/sources.list.d/docker.list
            apt-get update
            apt-get install -y lxc-docker
            sed -i 's/127.0.0.1:3128/proxy_ip/' /etc/default/docker
            sed -i 's/^#export http/export http/' /etc/default/docker
            service docker restart
            apt-get install -y python2.7-dev
            apt-get install -y python-pip
            pip --proxy http://proxy_ip install python-heatclient
            cat >/home/ubuntu/openrc <<EOF
            #!/bin/sh
            export LC_ALL=C
            export OS_NO_CACHE='true'
            export OS_TENANT_NAME='admin'
            export OS_USERNAME='admin'
            export OS_PASSWORD='admin'
            export OS_AUTH_URL='http://192.168.0.3:5000/v2.0/'
            export OS_AUTH_STRATEGY='keystone'
            EOF
            chown ubuntu:ubuntu /home/ubuntu/openrc
            chmod 644 /home/ubuntu/openrc
          params:
            proxy_ip: { get_param: proxy_ip_port }

  server-02:
    type: OS::Nova::Server
    properties:
      name: server-02
      key_name: { get_param: key_name }
      image: { get_param: image }
      flavor: { get_param: flavor }
      networks:
        - port: { get_resource: server-02_port }
#      admin_pass: { get_param: admin_pass }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/bash
            export http_proxy=http://proxy_ip
            export https_proxy=https://proxy_ip
            echo 127.0.1.1 server-02 >> /etc/hosts
            echo 'Acquire::http::Proxy "http://proxy_ip";' > /etc/apt/apt.conf.d/01proxy
            echo 'Acquire::https::Proxy "https://proxy_ip";' >> /etc/apt/apt.conf.d/01proxy
            apt-get update
            apt-get install -y apt-transport-https git socat connect-proxy
            apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9
            echo deb https://get.docker.io/ubuntu docker main > /etc/apt/sources.list.d/docker.list
            apt-get update
            apt-get install -y lxc-docker
            sed -i 's/127.0.0.1:3128/proxy_ip/' /etc/default/docker
            sed -i 's/^#export http/export http/' /etc/default/docker
            service docker restart
          params:
            proxy_ip: { get_param: proxy_ip_port }
        
#        str_replace:
#          template: |
#            #!/bin/bash
#            echo db_port
#          params:
#            db_port: { get_param: db_port }


  server-01_port:
    type: OS::Neutron::Port
    properties:
        network_id: { get_resource: private_net }
        fixed_ips:
          - subnet_id: { get_resource: private_subnet }
        security_groups: [{ get_resource: server_security_group }]

  server-01_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
        floating_network: { get_param: public_net }
        port_id: { get_resource: server-01_port }

  server-02_port:
    type: OS::Neutron::Port
    properties:
        network_id: { get_resource: private_net }
        fixed_ips:
          - subnet_id: { get_resource: private_subnet }
        security_groups: [{ get_resource: server_security_group }]

  server-02_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
        floating_network: { get_param: public_net }
        port_id: { get_resource: server-02_port }

  server_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
        description: Add security group rules for server
        name: security-group
        rules:
          - remote_ip_prefix: 0.0.0.0/0
            protocol: tcp
            port_range_min: 22
            port_range_max: 22
          - remote_ip_prefix: 0.0.0.0/0
            protocol: tcp
            port_range_min: 80
            port_range_max: 80
          - remote_ip_prefix: 0.0.0.0/0
            protocol: icmp
outputs:
  server-01_private_ip:
    description: IP address of server-01 in private network
    value: { get_attr: [ server-01, first_address ] }
  server-01_public_ip:
    description: Floating IP address of server1 in public network
    value: { get_attr: [ server-01_floating_ip, floating_ip_address ] }

  server-02_private_ip:
    description: IP address of server-02 in private network
    value: { get_attr: [ server-02, first_address ] }
  server-02_public_ip:
    description: Floating IP address of server1 in public network
    value: { get_attr: [ server-02_floating_ip, floating_ip_address ] }
#  server_networks:
#    description: The networks of the deployed server
#    value: { get_attr: [server, networks] }

#         - build-essential
#         - pastebinit
